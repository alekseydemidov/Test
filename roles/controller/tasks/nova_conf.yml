---
 - copy:
    dest: /etc/nova/nova.conf.{{ansible_date_time.date}}-{{ansible_date_time.epoch}}
    src:  /etc/nova/nova.conf
    remote_src: yes
    backup: yes
 - replace:
    path: /etc/nova/nova.conf
    replace: ""
    regexp: "^#.*\n|^$.*\n"
 - lineinfile:
    line: "{{ item }}"
    path: /etc/nova/nova.conf
    insertafter: "^\\[DEFAULT\\]"
    regexp: "{{ item.split('=')[0] }}"
   with_items:
        - enabled_apis = osapi_compute,metadata
        - transport_url = rabbit://{{rabbitmq.user}}:{{rabbitmq.passwd}}@{{controller.private_fqdn}}
        - my_ip = {{external_ip}}
        - use_neutron = True
        - firewall_driver = nova.virt.firewall.NoopFirewallDriver
   notify: restart openstack-nova

 - lineinfile:
    line: "{{ item }}"
    path: /etc/nova/nova.conf
    insertafter: "^\\[api\\]"
    regexp: "{{ item.split('=')[0] }}"
   with_items:
        - auth_strategy = keystone
   notify: restart openstack-nova
   
 - lineinfile:
    line: "{{ item }}"
    path: /etc/nova/nova.conf
    insertafter: "^\\[api_database\\]"
    regexp: "{{ item.split('=')[0] }}"
   with_items:
        - connection = mysql+pymysql://{{nova.db_user}}:{{nova.db_passwd}}@{{controller.private_fqdn}}/{{nova.db_api_name}}
   notify: restart openstack-nova
   
 - lineinfile:
    line: "{{ item }}"
    path: /etc/nova/nova.conf
    insertafter: "^\\[database\\]"
    regexp: "{{ item.split('=')[0] }}"
   with_items:
        - connection = mysql+pymysql://{{nova.db_user}}:{{nova.db_passwd}}@{{controller.private_fqdn}}/{{nova.db_name}}
   notify: restart openstack-nova
   
 - lineinfile:
    line: "{{ item }}"
    path: /etc/nova/nova.conf
    insertafter: "^\\[glance\\]"
    regexp: "{{ item.split('=')[0] }}"
   with_items:
        - api_servers = http://{{controller.private_fqdn}}:9292
   notify: restart openstack-nova
   
 - lineinfile:
    line: "{{ item }}"
    path: /etc/nova/nova.conf
    insertafter: "^\\[keystone_authtoken\\]"
    regexp: "{{ item.split('=')[0] }}"
   with_items:
        - auth_uri = http://{{controller.private_fqdn}}:5000
        - auth_url = http://{{controller.private_fqdn}}:35357
        - memcached_servers = {{controller.private_fqdn}}:11211
        - auth_type = password
        - project_domain_name = default
        - user_domain_name = default
        - project_name = service
        - username = {{nova.user}}
        - password = {{nova.passwd}}
   notify: restart openstack-nova
   
# - lineinfile:
#    line: "{{ item }}"
#    path: /etc/nova/nova.conf
#    insertafter: "^\\[libvirt\\]"
#    regexp: "{{ item.split('=')[0] }}"
#   with_items:
#        - virt_type = kvm
 - lineinfile:
    line: "{{ item }}"
    path: /etc/nova/nova.conf
    insertafter: "^\\[oslo_concurrency\\]"
    regexp: "{{ item.split('=')[0] }}"
   with_items:
        - lock_path = /var/lib/nova/tmp
   notify: restart openstack-nova
   
 - lineinfile:
    line: "{{ item }}"
    path: /etc/nova/nova.conf
    insertafter: "^\\[placement\\]"
    regexp: "{{ item.split('=')[0] }}"
   with_items:
        - os_region_name = RegionOne
        - project_domain_name = Default
        - project_name = service
        - auth_type = password
        - user_domain_name = Default
        - auth_url = http://{{controller.private_fqdn}}:35357/v3
        - username = {{nova.placement_user}}
        - password = {{nova.placement_passwd}}
   notify: restart openstack-nova
   
 - lineinfile:
    line: "{{ item }}"
    path: /etc/nova/nova.conf
    insertafter: "^\\[vnc\\]"
    regexp: "{{ item.split('=')[0] }}"
   with_items:
        - enabled = True
        - vncserver_listen = $my_ip
        - vncserver_proxyclient_address = $my_ip
   notify: restart openstack-nova
   